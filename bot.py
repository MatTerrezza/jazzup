import telebot
import buttons
import database
import os
import threading
import schedule
import time
import pytz
from datetime import datetime
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ForceReply, ReplyKeyboardMarkup, KeyboardButton

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS').split(',')))

def is_admin(user_id):
    return user_id in ADMIN_IDS

@bot.message_handler(commands=['start'])
def start_command(message):
    user_name = message.from_user.first_name
    database.add_user_if_not_exists(
        message.chat.id,
        message.from_user.username
    )
    
    if is_admin(message.from_user.id):
        bot.send_message(
            message.chat.id,
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=buttons.get_admin_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            f"""‚≠êÔ∏è–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {user_name}!  

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ JAZZ UP

–ö–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?
üìÖ –ö–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Reminder: 
–†–∞–±–æ—á–∏–π –æ—Ç—á–µ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —è—Å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö

üìÆ–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç¬ª 

üïí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å–¥–∞—á–∏ ‚Äì –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥–µ—Ç–∞–ª—è–º!""",
            reply_markup=buttons.get_main_keyboard()
        )

@bot.message_handler(func=lambda m: m.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç")
def ask_for_report(message):
    msg = bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç:",
        reply_markup=ForceReply()
    )
    bot.register_next_step_handler(msg, save_report)

def save_report(message):
    try:
        report_id = database.add_report(message.from_user.id, message.text)
        bot.send_message(
            message.chat.id,
            "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=buttons.get_admin_keyboard() if is_admin(message.from_user.id) else buttons.get_main_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        user = database.get_user(message.from_user.id)
        user_name = user[1] if user else f"User {message.from_user.id}"
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    admin_id,
                    f"üì© –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç {user_name}:\n\n{message.text}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=buttons.get_admin_keyboard() if is_admin(message.from_user.id) else buttons.get_main_keyboard()
        )

@bot.message_handler(func=lambda m: m.text == "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã")
def show_my_reports(message):
    reports = database.get_user_reports(message.from_user.id)
    if not reports:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.",
            reply_markup=buttons.get_admin_keyboard() if is_admin(message.from_user.id) else buttons.get_main_keyboard()
        )
        return
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=buttons.generate_my_reports_inline(message.from_user.id)
    )
def process_edit_report(message, report_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
        success = database.update_report(
            report_id=report_id,
            new_text=message.text,
            editor_id=message.from_user.id
        )
        
        keyboard = buttons.get_admin_keyboard() if is_admin(message.from_user.id) else buttons.get_main_keyboard()
        
        if success:
            bot.send_message(
                message.chat.id,
                "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–µ.",
                reply_markup=keyboard
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç",
                reply_markup=keyboard
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        keyboard = buttons.get_admin_keyboard() if is_admin(message.from_user.id) else buttons.get_main_keyboard()
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=keyboard
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit_report(call):
    try:
        report_id = call.data.split("_")[1]
        
        if not database.can_edit_report(call.from_user.id, report_id):
            bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç –∏–∑ –±–∞–∑—ã
        old_report = database.get_report_by_id(report_id)
        if not old_report:
            bot.answer_callback_query(call.id, "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        old_text = old_report[2]  # report_text –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 3 –ø–æ–∑–∏—Ü–∏–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ForceReply
        msg = bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç (—Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ):",
            reply_markup=ForceReply(selective=True)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            call.message.chat.id,
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{old_text}",
            reply_to_message_id=msg.message_id
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        bot.register_next_step_handler(msg, process_edit_report, report_id)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_edit_report: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")

def reminder_scheduler():                                           #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø—Ä–∏–º–µ—Ä –¥–ª—è –ú–°–ö)

    msk = pytz.timezone('Europe/Moscow')
    
    schedule.every().day.at("18:00", tz=msk).do(send_daily_reminder)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

def send_daily_reminder():
    print(f"[{datetime.now()}] –ó–∞–ø—É—Å–∫ send_daily_reminder")
    try:
        users = database.get_all_users()
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(users)}")
        
        for user_id, first_name in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({first_name})")
                bot.send_message(
                    user_id,
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {first_name}: —Å–µ–≥–æ–¥–Ω—è –¥–æ 18:00 –ø–æ –ú–°–ö –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç!\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç'"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_daily_reminder: {str(e)}")

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–∞–≤–∏–ª–∞")
def start_rules(message):
    rules_text = """<b>–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –†–∞–±–æ—á–µ–≥–æ –æ—Ç—á–µ—Ç–∞</b>\n\n
1.1 –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ—Ç—á—ë—Ç–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n
<b>–û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ</b> –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤ –í–∞—à–∏—Ö –†–∞–±–æ—á–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö:\n
<b>'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤' ‚â† '–ù–æ–º–µ—Ä–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã'</b>, —Ç–∞–∫ –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ –º—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (–¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ—è—Å–Ω–æ, –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π/—É—Å–ø–µ—à–Ω—ã–π –ª–∏), –∞ –≤–æ –≤—Ç–æ—Ä–æ–º - —É—Å–ø–µ—à–Ω—ã–π –¶–ö–ü —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞üìì\n
1.2 –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ—Ç—á—ë—Ç–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Ä–∞–∑–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–πüñç\n
1.3 –§–∏–Ω–∞–ª—å–Ω—ã–π –†–∞–±–æ—á–∏–π –æ—Ç—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –∫–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å –∫ 19:00üèÅ"""
    
    bot.send_message(
        message.chat.id,
        rules_text,
        parse_mode='HTML',
        reply_markup=buttons.get_admin_keyboard() if is_admin(message.from_user.id) else buttons.get_main_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã" and is_admin(m.from_user.id))
def admin_view_reports(message):
    users = database.get_users_with_reports()
    if not users:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—á–µ—Ç–∞–º–∏.")
        return
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=buttons.generate_users_inline()
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    try:
        if call.data.startswith("myreport_"):
            report_id = call.data.split("_")[1]
            report = database.get_report_by_id(report_id)
            
            if not report:
                bot.answer_callback_query(call.id, "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
            r_id, user_id, text, date, edited_by, edited_at = report
            date_str = date.strftime("%d.%m.%Y") if hasattr(date, 'strftime') else date
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = f"üìÖ <b>–û—Ç—á–µ—Ç –æ—Ç {date_str}</b>"
            if edited_at:
                edited_time = edited_at.strftime("%d.%m.%Y %H:%M") if hasattr(edited_at, 'strftime') else edited_at
                message_text += f"\n‚úèÔ∏è <i>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edited_time}</i>"
            message_text += f"\n\n{text}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=buttons.generate_my_report_actions_inline(report_id)
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã"
        elif call.data == "back_to_myreports":
            reports = database.get_user_reports(call.from_user.id)
            if not reports:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."
                )
                return
                
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=buttons.generate_my_reports_inline(call.from_user.id)
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        elif call.data.startswith("edit_"):
            report_id = call.data.split("_")[1]
            
            if not database.can_edit_report(call.from_user.id, report_id):
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            report = database.get_report_by_id(report_id)
            if not report:
                bot.answer_callback_query(call.id, "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            old_text = report[2]  # report_text
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            msg = bot.send_message(
                call.message.chat.id,
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:",
                reply_markup=ForceReply(selective=True)
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            bot.send_message(
                call.message.chat.id,
                f"üìÑ –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{old_text}",
                reply_to_message_id=msg.message_id
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.register_next_step_handler(msg, process_edit_report, report_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        elif call.data.startswith("delete_"):
            report_id = call.data.split("_")[1]
            
            if not database.can_edit_report(call.from_user.id, report_id):
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç")
                return
                
            # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç
            if database.delete_report(report_id):
                bot.answer_callback_query(call.id, "‚úÖ –û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤
                reports = database.get_user_reports(call.from_user.id)
                if reports:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                        reply_markup=buttons.generate_my_reports_inline(call.from_user.id)
                    )
                else:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="üì≠ –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."
                    )
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ
        elif call.data == "back_to_users":
            users = database.get_users_with_reports()
            if not users:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—á–µ—Ç–∞–º–∏."
                )
                return
                
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
                reply_markup=buttons.generate_users_inline()
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif call.data.startswith("user_"):
            user_id = int(call.data.split("_")[1])
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞:",
                reply_markup=buttons.generate_user_dates_inline(user_id)
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif call.data.startswith("report_"):
            _, user_id, report_date = call.data.split("_", 2)
            reports = database.get_user_reports(int(user_id))
            
            report_info = None
            for report in reports:
                try:
                    r_id, r_date, r_text, edited_at = report
                    if str(r_date) == report_date:
                        report_info = {
                            'id': r_id,
                            'text': r_text,
                            'edited_at': edited_at
                        }
                        break
                except ValueError:
                    continue
            
            if report_info:
                user = database.get_user(int(user_id))
                user_name = user[1] if user else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                
                try:
                    formatted_date = datetime.strptime(report_date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
                except:
                    formatted_date = report_date
                
                edited_info = ""
                if report_info['edited_at']:
                    edited_info = f"\n\n<i>(–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ)</i>"
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"<b>–û—Ç—á–µ—Ç {user_name}</b>\n"
                         f"<i>–î–∞—Ç–∞: {formatted_date}</i>\n\n"
                         f"{report_info['text']}"
                         f"{edited_info}",
                    parse_mode="HTML",
                    reply_markup=buttons.generate_report_actions_inline(
                        int(user_id), report_info['id'], report_date
                    )
                )
            else:
                bot.answer_callback_query(call.id, "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(func=lambda m: m.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
def show_my_tasks(message):
    tasks = database.get_user_tasks(message.from_user.id)
    if not tasks:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
            reply_markup=buttons.get_main_keyboard()
        )
        return
    
    response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á
        try:
            task_id, text, date, completed = task
            date_str = date.strftime("%d.%m.%Y") if isinstance(date, datetime) else date
            status = "‚úÖ" if completed else "üü°"
            response += f"{status} {date_str}\n{text}\n\n"
        except ValueError:
            continue
    
    bot.send_message(
        message.chat.id,
        response,
        reply_markup=buttons.get_main_keyboard()
    )
