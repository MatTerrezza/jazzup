import telebot.types as types
import json
import os
import database
from datetime import datetime

def get_user_keyboard(user_id=None):     #–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user_id is not None and is_admin(user_id):
        return get_admin_keyboard()
    return get_main_keyboard()

def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    btn_report = types.KeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç")
    btn_my_reports = types.KeyboardButton("–ú–æ–∏ –æ—Ç—á–µ—Ç—ã")
    btn_tasks = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    btn_my_tasks = types.KeyboardButton("–ú–æ–∏ –∑–∞–¥–∞—á–∏")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    btn_rule = types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")
    
    keyboard.add(btn_report, btn_my_reports)
    keyboard.add(btn_tasks, btn_my_tasks)
    keyboard.add(btn_rule)
    
    return keyboard

def get_admin_keyboard():   # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    btn_view_reports = types.KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã")

    keyboard.add(btn_view_reports)
    
    return keyboard
    
def generate_my_reports_inline(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    markup = types.InlineKeyboardMarkup()
    reports = database.get_user_reports(user_id)
    
    if not reports:
        return markup
    
    for report in reports[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤
        try:
            report_id, date, text, edited_at = report
            date_str = date.strftime("%d.%m.%Y") if hasattr(date, 'strftime') else date
            btn_text = f"{date_str} ({'—Ä–µ–¥.' if edited_at else '–Ω–æ–≤.'})"
            
            markup.add(
                types.InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"myreport_{report_id}"
                )
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            continue
    
    return markup
    
def generate_my_report_actions_inline(report_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç—á–µ—Ç–æ–º (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)"""
    markup = types.InlineKeyboardMarkup()
    
    markup.row(
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"edit_{report_id}"
        ),
        types.InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_{report_id}"
        )
    )
    
    markup.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="back_to_myreports"
        )
    )
    
    return markup    
    
def generate_users_inline():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    markup = types.InlineKeyboardMarkup()
    users = database.get_users_with_reports()
    
    if not users:
        return markup
    
    for user_id, first_name in users:
        markup.add(
            types.InlineKeyboardButton(
                text=first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}",
                callback_data=f"user_{user_id}"
            )
        )
    
    return markup

def generate_user_dates_inline(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    markup = types.InlineKeyboardMarkup()
    reports = database.get_user_reports(user_id)
    
    if not reports:
        return markup
    
    for report in reports:
        try:
            report_id, report_date, report_text, edited_at = report
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ datetime
            date_str = report_date.strftime("%Y-%m-%d %H:%M:%S") if hasattr(report_date, 'strftime') else str(report_date)
            formatted_date = report_date.strftime("%d.%m.%Y") if hasattr(report_date, 'strftime') else report_date
            
            markup.add(
                types.InlineKeyboardButton(
                    text=formatted_date,
                    callback_data=f"report_{user_id}_{date_str}"
                )
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            continue
    
    markup.add(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            callback_data="back_to_users"
        )
    )
    
    return markup

def generate_report_actions_inline(user_id, report_id, report_date):     #–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç—á–µ—Ç–æ–º (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)

    markup = types.InlineKeyboardMarkup()
    
    markup.add(
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"edit_{report_id}"
        ),
        types.InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_{report_id}"
        )
    )
    
    markup.add(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º",
            callback_data=f"user_{user_id}"
        )
    )
    
    return markup


def process_edit_report(message, report_id):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = database.update_report(
            report_id=report_id,
            new_text=message.text,
            editor_id=message.from_user.id
        )
        
        if success:
            bot.send_message(
                message.chat.id,
                "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=buttons.get_main_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç",
                reply_markup=buttons.get_main_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=buttons.get_main_keyboard()
        )
